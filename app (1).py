# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wo-UiIq1VycZEADC2hEDHnmn5MSrA21C
"""

import streamlit as st
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Load the dataset
file_path = 'dataset.csv'  # Make sure this path is correct
movie_dataset = pd.read_csv(file_path)

# Fill any NaN values
movie_dataset['overview'] = movie_dataset['overview'].fillna('')
movie_dataset['genre'] = movie_dataset['genre'].fillna('')

# Combine the 'overview' and 'genre' columns for a more comprehensive content description
movie_dataset['combined_features'] = movie_dataset['overview'] + ' ' + movie_dataset['genre']

# Convert all movie titles to lowercase for consistent comparison
movie_dataset['title'] = movie_dataset['title'].str.lower()

# Define and fit the TF-IDF Vectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_df=0.8, min_df=1, ngram_range=(1, 1), max_features=None)
tfidf_matrix = tfidf_vectorizer.fit_transform(movie_dataset['combined_features'])

# Compute the cosine similarity matrix
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Function to get movie recommendations based on cosine similarity
def get_recommendations(title, cosine_sim=cosine_sim):
    title = title.lower().strip()  # Normalize user input
    try:
        idx = movie_dataset[movie_dataset['title'] == title].index[0]
        sim_scores = list(enumerate(cosine_sim[idx]))
        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
        sim_scores = sim_scores[1:11]  # Get top 10 similar movies
        movie_indices = [i[0] for i in sim_scores]
        return movie_dataset['title'].iloc[movie_indices].str.title()
    except IndexError:
        return ["No recommendations found. Please try another movie title."]
    except Exception as e:
        return [f"An error occurred: {e}"]

# Streamlit UI setup
st.title("ðŸŽ¬ Amazon Prime Video Themed Movie Recommender")
st.markdown("""
<style>
    .main {
        background-color: #0F171E;
        color: white;
    }
    .sidebar .sidebar-content {
        background-color: #232F3E;
    }
</style>
""", unsafe_allow_html=True)

st.header("Find your next favorite movie!")
user_input = st.text_input("Enter a movie title", "The Shawshank Redemption")

if st.button("Get Recommendations"):
    if user_input:
        recommendations = get_recommendations(user_input)
        st.write(f"**Top 10 movies recommended for '{user_input}':**")
        for movie in recommendations:
            st.write(f"- {movie}")
    else:
        st.write("Please enter a valid movie title.")

st.sidebar.title("About")
st.sidebar.info("This is a content-based movie recommender system themed like Amazon Prime Video. Enter a movie title to get started!")